`timescale 1ns / 1ps

module top_counter_up_down (
    input        clk,
    input        reset,
    input        rx,
    output [3:0] fndCom,
    output [7:0] fndFont
);
    wire [13:0] fndData;
    wire [3:0]  fndDot;

    wire run, stop, clear, mode;

    uart_rx_top U_uart_rx_top(
        .clk(clk),
        .reset(reset),
        .rx(rx),
        .rx_done(rx_done),
        .run(run),
        .stop(stop),
        .clear(clear),
        .mode(mode)
    );

    counter_up_down U_Counter (
        .clk  (clk),
        .reset(reset),
        .run(run),
        .stop(stop),
        .clear(clear),
        .mode(mode),
        .count(fndData),
        .dot_data(fndDot)
    );

    fndController U_FndController (
        .clk(clk),
        .reset(reset),
        .fndData(fndData),
        .fndDot(fndDot),
        .fndCom(fndCom),
        .fndFont(fndFont)
    );

endmodule

module counter_up_down (
    input         clk,
    input         reset,
    input         run,
    input         stop,
    input         clear,
    input         mode,
    output [13:0] count,
    output [3:0]  dot_data
);
    wire tick;

    clk_div_10hz U_Clk_Div_10Hz (
        .clk  (clk),
        .reset(reset),
        .tick (tick)
    );

    counter U_Counter_Up_Down (
        .clk  (clk),
        .reset(reset),
        .tick (tick),
        .run(run),
        .stop(stop),
        .clear(clear),
        .mode(mode),
        .count(count)
    );

    comp_dot U_comp_dot(
        .count(count),
        .dot_data(dot_data)  
    );

endmodule

module counter (
    input         clk,
    input         reset,
    input         tick,
    input         run,
    input         stop,
    input         clear,
    input         mode,
    output [13:0] count
);

    localparam  IDLE     = 2'b00,
                RUN_STOP = 2'b01,
                CLEAR    = 2'b10;

    reg [1:0] state, next;

    reg [$clog2(10000)-1:0] counter_reg, counter_next;

    assign count = counter_reg;

    always @(posedge clk, posedge reset) begin
        if (reset) begin
            state       <= IDLE;
            counter_reg <= 0;
        end
        else begin  
            state       <= next;
            counter_reg <= counter_next;
        end        
    end

    always @(*) begin
        next         = state;
        counter_next = counter_reg;

        case(state)
            IDLE : begin
                if(run == 1'b1) begin
                    next = RUN_STOP;
                end
            end 

            RUN_STOP : begin
                if(clear == 1'b1) begin
                        next = CLEAR;
                        counter_next = 0;
                end
                else if (stop == 1'b0) begin
                        counter_next = counter_reg;
                end
                else if (tick) begin
                    if (mode == 1'b1) begin                            
                        if (counter_reg == 0) begin
                            counter_next = 9999;
                        end 
                        else begin
                        counter_next = counter_reg - 1;
                        end
                    end
                    else begin
                        if (counter_reg == 9999) begin
                            counter_next = 0;
                        end 
                        else begin
                            counter_next = counter_reg + 1;
                        end
                    end
                end
            end

            CLEAR : begin
                if(clear == 1'b0)
                    next = IDLE;
            end
        endcase       
    end
/*
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            counter <= 0;
        end else begin
            if (mode == 1'b0) begin
                if (tick) begin
                    if (counter == 9999) begin
                        counter <= 0;
                    end else begin
                        counter <= counter + 1;
                    end
                end
            end else begin
                if (tick) begin
                    if (counter == 0) begin
                        counter <= 9999;
                    end else begin
                        counter <= counter - 1;
                    end
                end
            end
        end
    end
*/
endmodule

module clk_div_10hz (
    input  wire clk,
    input  wire reset,
    output reg  tick
);
    reg [$clog2(10_000_000)-1:0] div_counter;

    always @(posedge clk, posedge reset) begin
        if (reset) begin
            div_counter <= 0;
            tick <= 1'b0;
        end else begin
            if (div_counter == 10_000_000 - 1) begin
                div_counter <= 0;
                tick <= 1'b1;
            end else begin
                div_counter <= div_counter + 1;
                tick <= 1'b0;
            end
        end
    end
endmodule

module comp_dot (
    input  [13:0] count,
    output [3:0]  dot_data  
);
    assign dot_data = ((count % 10) < 5) ? 4'b1101 : 4'b1111; 
endmodule
