`timescale 1ns / 1ps

module uart_rx_top (
    input clk,
    input reset,
    input rx,
    output rx_done,
    output run,
    output stop,
    output clear,
    output mode
);
    wire baud_tick;
    wire [7:0] rx_data;

    baud_tick_gen U_baud_tick_gen(
        .clk(clk),
        .reset(reset),
        .tick(baud_tick)
    );

    uart_rx U_uart_rx(
        .clk(clk),
        .reset(reset),
        .tick(baud_tick),
        .rx(rx),
        .rx_data(rx_data),
        .rx_done(rx_done)
    );

    signal U_signal(
        .data(rx_data),
        .run(run),
        .stop(stop),
        .clear(clear),
        .mode(mode)
    );
    
endmodule

module uart_rx(
    input clk,
    input reset,
    input tick,
    input rx,
    output [7:0] rx_data,
    output rx_done
    );

    localparam  IDLE  = 2'b00,   
                START = 2'b01,
                DATA  = 2'b10,
                STOP  = 2'b11;

    reg rx_done_reg , rx_done_next;
    reg [1:0] state, next;
    reg [3:0] bit_count_reg, bit_count_next;
    reg [4:0] tick_count_reg, tick_count_next;
    reg [7:0] rx_data_reg, rx_data_next;

    assign rx_data = rx_data_reg;
    assign rx_done = rx_done_reg;

    always @(posedge clk, posedge reset) begin
        if(reset) begin
            state           <= IDLE;
            rx_data_reg     <= 1'b1;
            rx_done_reg     <= 1'b0;
            bit_count_reg   <= 4'd0;
            tick_count_reg  <= 5'd0;        
        end
        else begin
            state           <= next;
            rx_data_reg     <= rx_data_next;
            rx_done_reg     <= rx_done_next;
            bit_count_reg   <= bit_count_next;
            tick_count_reg  <= tick_count_next;        
        end
    end

    always @(*) begin
        next            = state;
        rx_data_next    = rx_data_reg;
        rx_done_next    = rx_done_reg;
        bit_count_next  = bit_count_reg;
        tick_count_next = tick_count_reg;
   
        case (state)
            IDLE : begin
                rx_done_next = 1'b0;

                if(!rx)
                    next = START;
            end 

            START : begin
                if(tick) begin
                    if(tick_count_reg == 7) begin
                        next = DATA;
                        tick_count_next = 0;
                    end
                    else begin
                        tick_count_next = tick_count_reg + 1;
                    end
                end
            end

            DATA : begin
                if(tick) begin
                    if(tick_count_reg == 15) begin
                        rx_data_next[bit_count_reg] = rx;
                        tick_count_next = 0;

                        if(bit_count_reg == 7) begin
                            next = STOP;
                            bit_count_next = 0;
                        end
                        else begin
                            bit_count_next = bit_count_reg + 1;
                        end
                    end
                    else begin
                        tick_count_next = tick_count_reg + 1;
                    end
                end
            end

            STOP : begin
                rx_done_next = 1'b1;

                if(tick) begin
                    if(tick_count_reg == 23) begin
                        next = IDLE;
                        tick_count_next = 0;
                    end
                    else begin
                        tick_count_next = tick_count_reg + 1;
                    end
                end                
            end
        endcase
        
    end
endmodule

module baud_tick_gen (
    input  wire clk,
    input  wire reset,
    output reg  tick
);
    parameter BAUD_COUNT = 100_000_000 / 9600 / 16;

    reg [$clog2(BAUD_COUNT)-1:0] div_counter;

    always @(posedge clk, posedge reset) begin
        if (reset) begin
            div_counter <= 0;
            tick <= 1'b0;
        end else begin
            if (div_counter == BAUD_COUNT - 1) begin
                div_counter <= 0;
                tick <= 1'b1;
            end else begin
                div_counter <= div_counter + 1;
                tick <= 1'b0;
            end
        end
    end
endmodule

module signal (
    input [7:0] data,
    output reg run,
    output reg stop,
    output reg clear,
    output reg mode
);
    always @(*) begin
        run     = 1'b0;
        stop    = 1'b0;
        clear   = 1'b0;
        mode    = 1'b0;
        case(data)
            8'h72 : run   = 1'b1;
            8'h73 : stop  = 1'b1;
            8'h63 : clear = 1'b1;
            8'h6d : mode  = 1'b1;
            default : begin
                run     = 1'b0;
                stop    = 1'b0;
                clear   = 1'b0;
                mode    = 1'b0;
            end
        endcase        
    end
endmodule
