`timescale 1ns/1ps

module DataPath (
    input  logic        clk,
    input  logic        reset,
    input  logic        AsrcMuxSel,
    input  logic        AEn,
    output logic        ALt10,
    input  logic        OutBuf,
    output logic [7:0]  outPort
);  
    wire [7:0] d, q, sum;
    wire i;

    mux U_mux(
        .a(i),
        .b(8'd0),
        .AsrcMuxSel(AsrcMuxSel),
        .d(d)
    );

    register U_register(
        .clk(clk),
        .reset(reset),
        .en(AEn),
        .d(d),
        .q(q)
    );

    adder U_adder(
        .a(q),
        .b(8'd1),
        .sum(sum)
    );

    comparator U_comparator(
        .a(q),
        .b(8'd10),
        .lt(ALt10)
    );

    buffer U_buffer(
        .a(q),
        .buff(OutBuf),
        .y(outPort)
    );    
endmodule

module register(
    input  logic        clk,
    input  logic        reset,
    input  logic        en,
    input  logic  [7:0] d,
    output logic  [7:0] q
);
    always_ff @( posedge clk, posedge reset ) begin 
        if (reset) begin
            q <= 0;
        end
        else begin
            if(en) begin
                q <= d;
            end
        end
    end
endmodule

module adder (
    input  logic [7:0] a,
    input  logic [7:0] b,
    output logic [7:0] sum
);
     assign sum = a + b;
endmodule

module comparator (
    input  logic [7:0] a,
    input  logic [7:0] b,
    output logic       lt
);

    assign lt = a < b;
endmodule

module mux (
    input logic [7:0] a,
    input logic [7:0] b,
    input logic AsrcMuxSel,
    output logic [7:0] d
);
    assign d = (AsrcMuxSel) ? a : b;
endmodule

module buffer (
    input  logic [7:0] a,
    input  logic       buff,
    output logic [7:0] y
);
    assign y = (buff) ? a : 8'd0;
endmodule
