`timescale 1ns/1ps

module DataPath (
    input  logic        clk,
    input  logic        reset,
    input  logic        SumSrcMuxSel,
    input  logic        iSrcMuxSel,
    input  logic        AdderSrcMuxSel,
    input  logic        SumEn,
    input  logic        iEn,
    output logic        Iled10,
    input  logic        OutBuf,
    output logic [7:0]  outPort
);  
    logic [7:0] adderResult, 
                SumSrcMuxData,
                SumRegData, 
                iSrcMuxData,
                iRegData, 
                AdderSrcMuxData;

    mux U_mux_SumSrc(
        .a      (adderResult),
        .b      (8'd0),
        .Sel    (SumSrcMuxSel),
        .d      (SumSrcMuxData)
    );

    register U_register_SumSrc(
        .clk    (clk),
        .reset  (reset),
        .en     (SumEn),
        .d      (SumSrcMuxData),
        .q      (SumRegData)
    );

    mux U_mux_AdderSrc(
        .a      (SumRegData),
        .b      (8'd1),
        .Sel    (AdderSrcMuxSel),
        .d      (AdderSrcMuxData)
    );

    mux U_mux_iSrc(
        .a      (adderResult),
        .b      (8'd0),
        .Sel    (iSrcMuxSel),
        .d      (iSrcMuxData)
    );

    register U_register_iSrc(
        .clk    (clk),
        .reset  (reset),
        .en     (iEn),
        .d      (iSrcMuxData),
        .q      (iRegData)
    );

    comparator U_comparator(
        .a      (iRegData),
        .b      (8'd11),
        .lt     (Iled10)
    );

    adder U_adder(
        .a      (AdderSrcMuxData),
        .b      (iRegData),
        .sum    (adderResult)
    );

    register U_register_outBuf(
        .clk    (clk),
        .reset  (reset),
        .en     (OutBuf),
        .d      (SumRegData),
        .q      (outPort)
    );
endmodule

module register(
    input  logic        clk,
    input  logic        reset,
    input  logic        en,
    input  logic  [7:0] d,
    output logic  [7:0] q
);
    always_ff @( posedge clk, posedge reset ) begin 
        if (reset) begin
            q <= 8'd0;
        end
        else begin
            if(en) begin
                q <= d;
            end
        end
    end
endmodule

module adder (
    input  logic [7:0] a,
    input  logic [7:0] b,
    output logic [7:0] sum
);
     assign sum = a + b;
endmodule

module comparator (
    input  logic [7:0] a,
    input  logic [7:0] b,
    output logic       lt
);

    assign lt = a < b;
endmodule

module mux (
    input  logic [7:0] a,
    input  logic [7:0] b,
    input  logic       Sel,
    output logic [7:0] d
);
    assign d = (Sel) ? a : b;
endmodule
