`timescale 1ns / 1ps

module ROM (
    input  logic [31:0] addr,
    output logic [31:0] data
);
    logic [31:0] rom[0:15];

    initial begin
        //rom[x]=32'b fucn7 _ rs2 _ rs1 _f3 _ rd  _opcode; // R-Type
        rom[0]  = 32'b0000000_00001_00010_000_00100_0110011; // add x4, x2, x1
        rom[1]  = 32'b0100000_00001_00010_000_00101_0110011; // sub x5, x2, x1
    //rom[x]=   32'b_ imm[11:5]_ rs2 _ rs1 _fn3_imm[4:0]_opcode; // S-Type
        rom[2]  = 32'b0000000_00010_00000_010_01000_0100011;// sw x2, 8(x0), ram[0]
    //rom[x]=   32'b_ imm12         _ rs1 _fn3_  rd _opcode; // L-Type    
        rom[3]  = 32'b0000000_01000_00000_010_00011_0000011; // LW x3 8(x0)
    // rom[x]=  32'b_ imm12         _ rs1 _fn3_  rd _opcode; // I-Type 
        rom[4]  = 32'b0000000_01000_00010_000_00011_0010011; // ADDI  x2 8(x0)
        rom[5]  = 32'b0000000_00100_00001_010_00011_0010011; // STLI  x1 4(x0)
        rom[6]  = 32'b0000000_01000_00010_011_00011_0010011; // SLTUI x2 8(x0)
        rom[7]  = 32'b0000000_00100_00100_100_00011_0010011; // XORI  x3 4(x0)
        rom[8]  = 32'b0000000_01000_00010_110_00011_0010011; // ORI   x2 8(x0)
        rom[9]  = 32'b0000000_00100_00001_111_00011_0010011; // ANDI  x1 4(x0)
    // rom[x]=  32'b_ imm7   _shamt_ rs1 _fn3_  rd _opcode; // I-Type     
        rom[10] = 32'b0000000_01000_00001_001_00011_0010011; // SLLI  x1 8(x0)
        rom[11] = 32'b0000000_00100_00010_101_00011_0010011; // SRLI  x2 4(x0)
        rom[12] = 32'b0100000_01000_00001_101_00011_0010011; // SRAI  x1 8(x0)
    end
    
    assign data = rom[addr[31:2]];
endmodule
