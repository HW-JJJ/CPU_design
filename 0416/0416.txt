0416

시간표 변경
일정 내용

참고사이트

컴파일러 어셈블러

a5 -> x15 register

00a00793 -> RV32I I-type addi x15, x0, 10 ==> x0+10 -> x15

sp (stack pointer)

변수에 상수값 넣으면 바로 RAM에 저장

START UP CODE : C언어와 CPU간 동작을 위한 초기 셋팅 내용


free memory : RAM 최상위 주소부터 STACK 할당		stack pointer (SP)
space     						-> 전원/리셋 인가시 처음 SP 할당 명령수행
    							-> ROM 0번지에 SP할당이 제일 먼저

	
main:				=> 전원 인가시 sp가 최상위에 초기화 되어있는데
	addi    sp,sp,-32	=> 최상위에서 아래로 32 에 sp를 가리키게 변경 ( 그 범위가 main함수 stack 영역이 됨)
        sw      ra,28(sp)       => RAM 28번 주소에 복귀 주소 백업
        sw      s0,24(sp) 	=> RAM 24번 주소에 프레임 포인터 백업
        addi    s0,sp,32
        li      a5,10
        sw      a5,-20(s0)
        li      a5,10
        sw      a5,-24(s0)
        lw      a4,-20(s0)
        lw      a5,-24(s0)
        add     a5,a4,a5
        sw      a5,-28(s0)
        li      a5,0
        mv      a0,a5
        lw      ra,28(sp)
        lw      s0,24(sp)
        addi    sp,sp,32
        jr      ra

				sp 위치 하위로 함수에 대한 stack 영역, 함수내 함수는 또 32byte stack 영역이 추가되는


< 포인터 > 

	main:
        addi    sp,sp,-48				// s0  		|
        sw      ra,44(sp)						|
        sw      s0,40(sp)						|
        addi    s0,sp,48						|
									|
        addi    a5,s0,-32	// 					|
        sw      a5,-20(s0)	// -20(s0) pA = &a	// -20(s0)	| (-32(s0))  pA
									|
        addi    a5,s0,-36	// -24(s0) pB = &b 	// -24(s0)	| (-36(s0))  pB
        sw      a5,-24(s0)						|
        li      a5,10		// a5 레지스터에 10 넣기			|
        sw      a5,-32(s0)	// ram에 저장		// -32(s0)	|     10      a
        li      a5,20							|
        sw      a5,-36(s0)				// -36(s0)	|     20      b
        lw      a5,-20(s0)	// pA에 담긴 주소에 있는 값을  a5에		|
        lw      a4,0(a5)	// a5에 담긴 주소에 있는 값을  a4에		|
        lw      a5,-24(s0)						|
        lw      a5,0(a5)						|
        add     a5,a4,a5						|
        sw      a5,-28(s0)
        li      a5,0
        mv      a0,a5
        lw      ra,44(sp)
        lw      s0,40(sp)
        addi    sp,sp,48
        jr      ra

// 포인터 변수에 있는 주소를 들고와서 다시 그 주소에 있는 값을 읽는 것

           : BSS 영역 바로 위부터 Heap 영역 할당

.BSS (초기화가 되지 않은 전역변수) RAM


.DATA (초기화된 전역변수)  ROM/RAM


.TEXT
fe010113
00112e23
00812c23
02010413
00a00793
fef42623
00a00793
fef42423  ====> TEXT 영역 (ROM)에 명령어 코드가 들어감
fec42703
fe842783
00f707b3
fef42223
00000793
00078513
01c12083
01812403
02010113
00008067

//
 
sorting

memory 공간에 stack 영역의 변화과정과 변수의 memory 할당, 배열, 포인터의 동작방식을 memory 관점에서 분석하기

1. sp 스택 포인터 48내려서 그만큼의 바이트 공간 확보

2. 현재 sp기준 44 상위 주소에 ra 저장

3. 현재 sp기준 40 상위 주소에 s0 저장

4. sp상위 48 위 주소 를 s0으로 기준점 잡음

5. ram s0기준 -40,-36,-32,-28,-24,-20에 0 저장

6. 레지스터 파일 a5에 5,3,1,2,4를 각각 저장했다가
     그 값을 ram 각각 -40,-36,-32,-28,-24 (s0기준)에 저장 

7. s0기준 -40값을 sort함수 stack 메모리 기준값 으로 지정


